// source: proto/autoklav.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.Autoklav.Empty', null, global);
goog.exportSymbol('proto.Autoklav.ProcessConfig', null, global);
goog.exportSymbol('proto.Autoklav.ProcessConfigMode', null, global);
goog.exportSymbol('proto.Autoklav.ProcessConfigState', null, global);
goog.exportSymbol('proto.Autoklav.ProcessConfigType', null, global);
goog.exportSymbol('proto.Autoklav.ProcessInfo', null, global);
goog.exportSymbol('proto.Autoklav.ProcessLogRow', null, global);
goog.exportSymbol('proto.Autoklav.SensorValues', null, global);
goog.exportSymbol('proto.Autoklav.SetVariable', null, global);
goog.exportSymbol('proto.Autoklav.StartProcessRequest', null, global);
goog.exportSymbol('proto.Autoklav.StateMachineValues', null, global);
goog.exportSymbol('proto.Autoklav.Status', null, global);
goog.exportSymbol('proto.Autoklav.Variables', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.Empty.displayName = 'proto.Autoklav.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.Status.displayName = 'proto.Autoklav.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.Variables = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.Variables, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.Variables.displayName = 'proto.Autoklav.Variables';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.SetVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.SetVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.SetVariable.displayName = 'proto.Autoklav.SetVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.SensorValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.SensorValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.SensorValues.displayName = 'proto.Autoklav.SensorValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.StateMachineValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.StateMachineValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.StateMachineValues.displayName = 'proto.Autoklav.StateMachineValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.ProcessConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.ProcessConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.ProcessConfig.displayName = 'proto.Autoklav.ProcessConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.ProcessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.ProcessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.ProcessInfo.displayName = 'proto.Autoklav.ProcessInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.ProcessLogRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.ProcessLogRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.ProcessLogRow.displayName = 'proto.Autoklav.ProcessLogRow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Autoklav.StartProcessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Autoklav.StartProcessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Autoklav.StartProcessRequest.displayName = 'proto.Autoklav.StartProcessRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.Empty}
 */
proto.Autoklav.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.Empty;
  return proto.Autoklav.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.Empty}
 */
proto.Autoklav.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errors: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorsstring: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.Status}
 */
proto.Autoklav.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.Status;
  return proto.Autoklav.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.Status}
 */
proto.Autoklav.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrors(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorsstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrors();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorsstring();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.Autoklav.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Status} returns this
 */
proto.Autoklav.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 errors = 2;
 * @return {number}
 */
proto.Autoklav.Status.prototype.getErrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Status} returns this
 */
proto.Autoklav.Status.prototype.setErrors = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string errorsString = 3;
 * @return {string}
 */
proto.Autoklav.Status.prototype.getErrorsstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.Status} returns this
 */
proto.Autoklav.Status.prototype.setErrorsstring = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.Variables.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.Variables.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.Variables} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.Variables.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetk: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    serialdatatime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statemachinetick: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sterilizationtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pasterizationtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.Variables}
 */
proto.Autoklav.Variables.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.Variables;
  return proto.Autoklav.Variables.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.Variables} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.Variables}
 */
proto.Autoklav.Variables.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetk(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSerialdatatime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatemachinetick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSterilizationtemp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPasterizationtemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.Variables.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.Variables.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.Variables} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.Variables.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetk();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getSerialdatatime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStatemachinetick();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSterilizationtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPasterizationtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double targetK = 1;
 * @return {number}
 */
proto.Autoklav.Variables.prototype.getTargetk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Variables} returns this
 */
proto.Autoklav.Variables.prototype.setTargetk = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 serialDataTime = 2;
 * @return {number}
 */
proto.Autoklav.Variables.prototype.getSerialdatatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Variables} returns this
 */
proto.Autoklav.Variables.prototype.setSerialdatatime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 stateMachineTick = 3;
 * @return {number}
 */
proto.Autoklav.Variables.prototype.getStatemachinetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Variables} returns this
 */
proto.Autoklav.Variables.prototype.setStatemachinetick = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double sterilizationTemp = 4;
 * @return {number}
 */
proto.Autoklav.Variables.prototype.getSterilizationtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Variables} returns this
 */
proto.Autoklav.Variables.prototype.setSterilizationtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double pasterizationTemp = 5;
 * @return {number}
 */
proto.Autoklav.Variables.prototype.getPasterizationtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.Variables} returns this
 */
proto.Autoklav.Variables.prototype.setPasterizationtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.SetVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.SetVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.SetVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.SetVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.SetVariable}
 */
proto.Autoklav.SetVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.SetVariable;
  return proto.Autoklav.SetVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.SetVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.SetVariable}
 */
proto.Autoklav.SetVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.SetVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.SetVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.SetVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.SetVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Autoklav.SetVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.SetVariable} returns this
 */
proto.Autoklav.SetVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.Autoklav.SetVariable.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.SetVariable} returns this
 */
proto.Autoklav.SetVariable.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.SensorValues.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.SensorValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.SensorValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.SensorValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    temp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    tempk: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.SensorValues}
 */
proto.Autoklav.SensorValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.SensorValues;
  return proto.Autoklav.SensorValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.SensorValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.SensorValues}
 */
proto.Autoklav.SensorValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTempk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.SensorValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.SensorValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.SensorValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.SensorValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemp();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTempk();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double temp = 1;
 * @return {number}
 */
proto.Autoklav.SensorValues.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.SensorValues} returns this
 */
proto.Autoklav.SensorValues.prototype.setTemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double tempK = 2;
 * @return {number}
 */
proto.Autoklav.SensorValues.prototype.getTempk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.SensorValues} returns this
 */
proto.Autoklav.SensorValues.prototype.setTempk = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double pressure = 3;
 * @return {number}
 */
proto.Autoklav.SensorValues.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.SensorValues} returns this
 */
proto.Autoklav.SensorValues.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.StateMachineValues.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.StateMachineValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.StateMachineValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.StateMachineValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    temp: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    tempk: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    dtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    dr: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    fr: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    r: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    sumfr: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    sumr: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.StateMachineValues}
 */
proto.Autoklav.StateMachineValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.StateMachineValues;
  return proto.Autoklav.StateMachineValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.StateMachineValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.StateMachineValues}
 */
proto.Autoklav.StateMachineValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTempk(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDtemp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPressure(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDr(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setR(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSumfr(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSumr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.StateMachineValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.StateMachineValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.StateMachineValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.StateMachineValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTemp();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getTempk();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getDr();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getFr();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSumfr();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getSumr();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional uint32 time = 1;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double temp = 2;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setTemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double tempK = 3;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getTempk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setTempk = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double dTemp = 4;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getDtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setDtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double pressure = 5;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double Dr = 6;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getDr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setDr = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double Fr = 7;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getFr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setFr = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double r = 8;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setR = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double sumFr = 9;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getSumfr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setSumfr = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double sumr = 10;
 * @return {number}
 */
proto.Autoklav.StateMachineValues.prototype.getSumr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.StateMachineValues} returns this
 */
proto.Autoklav.StateMachineValues.prototype.setSumr = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.ProcessConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.ProcessConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.ProcessConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.ProcessConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    customtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targetf: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    targettime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maintaintemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    maintainpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    finishtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.ProcessConfig}
 */
proto.Autoklav.ProcessConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.ProcessConfig;
  return proto.Autoklav.ProcessConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.ProcessConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.ProcessConfig}
 */
proto.Autoklav.ProcessConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Autoklav.ProcessConfigType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCustomtemp(value);
      break;
    case 3:
      var value = /** @type {!proto.Autoklav.ProcessConfigMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetf(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargettime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintaintemp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintainpressure(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFinishtemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.ProcessConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.ProcessConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.ProcessConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.ProcessConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCustomtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTargetf();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTargettime();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaintaintemp();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMaintainpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getFinishtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional ProcessConfigType type = 1;
 * @return {!proto.Autoklav.ProcessConfigType}
 */
proto.Autoklav.ProcessConfig.prototype.getType = function() {
  return /** @type {!proto.Autoklav.ProcessConfigType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Autoklav.ProcessConfigType} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double customTemp = 2;
 * @return {number}
 */
proto.Autoklav.ProcessConfig.prototype.getCustomtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setCustomtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional ProcessConfigMode mode = 3;
 * @return {!proto.Autoklav.ProcessConfigMode}
 */
proto.Autoklav.ProcessConfig.prototype.getMode = function() {
  return /** @type {!proto.Autoklav.ProcessConfigMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Autoklav.ProcessConfigMode} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double targetF = 4;
 * @return {number}
 */
proto.Autoklav.ProcessConfig.prototype.getTargetf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setTargetf = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint32 targetTime = 5;
 * @return {number}
 */
proto.Autoklav.ProcessConfig.prototype.getTargettime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setTargettime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double maintainTemp = 6;
 * @return {number}
 */
proto.Autoklav.ProcessConfig.prototype.getMaintaintemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setMaintaintemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double maintainPressure = 7;
 * @return {number}
 */
proto.Autoklav.ProcessConfig.prototype.getMaintainpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setMaintainpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double finishTemp = 8;
 * @return {number}
 */
proto.Autoklav.ProcessConfig.prototype.getFinishtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessConfig} returns this
 */
proto.Autoklav.ProcessConfig.prototype.setFinishtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.ProcessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.ProcessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.ProcessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.ProcessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    productname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    productquantity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bacteria: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    processstart: jspb.Message.getFieldWithDefault(msg, 5, ""),
    processlength: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.ProcessInfo}
 */
proto.Autoklav.ProcessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.ProcessInfo;
  return proto.Autoklav.ProcessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.ProcessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.ProcessInfo}
 */
proto.Autoklav.ProcessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductquantity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacteria(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessstart(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcesslength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.ProcessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.ProcessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.ProcessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.ProcessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProductquantity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBacteria();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProcessstart();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProcesslength();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string productName = 1;
 * @return {string}
 */
proto.Autoklav.ProcessInfo.prototype.getProductname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessInfo} returns this
 */
proto.Autoklav.ProcessInfo.prototype.setProductname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string productQuantity = 2;
 * @return {string}
 */
proto.Autoklav.ProcessInfo.prototype.getProductquantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessInfo} returns this
 */
proto.Autoklav.ProcessInfo.prototype.setProductquantity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bacteria = 3;
 * @return {string}
 */
proto.Autoklav.ProcessInfo.prototype.getBacteria = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessInfo} returns this
 */
proto.Autoklav.ProcessInfo.prototype.setBacteria = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.Autoklav.ProcessInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessInfo} returns this
 */
proto.Autoklav.ProcessInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string processStart = 5;
 * @return {string}
 */
proto.Autoklav.ProcessInfo.prototype.getProcessstart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessInfo} returns this
 */
proto.Autoklav.ProcessInfo.prototype.setProcessstart = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string processLength = 6;
 * @return {string}
 */
proto.Autoklav.ProcessInfo.prototype.getProcesslength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessInfo} returns this
 */
proto.Autoklav.ProcessInfo.prototype.setProcesslength = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.ProcessLogRow.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.ProcessLogRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.ProcessLogRow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.ProcessLogRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    productquantity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bacteria: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    processstart: jspb.Message.getFieldWithDefault(msg, 6, ""),
    processlength: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.ProcessLogRow}
 */
proto.Autoklav.ProcessLogRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.ProcessLogRow;
  return proto.Autoklav.ProcessLogRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.ProcessLogRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.ProcessLogRow}
 */
proto.Autoklav.ProcessLogRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductquantity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacteria(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessstart(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcesslength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.ProcessLogRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.ProcessLogRow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.ProcessLogRow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.ProcessLogRow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProductname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductquantity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBacteria();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProcessstart();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProcesslength();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Autoklav.ProcessLogRow.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string productName = 2;
 * @return {string}
 */
proto.Autoklav.ProcessLogRow.prototype.getProductname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setProductname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string productQuantity = 3;
 * @return {string}
 */
proto.Autoklav.ProcessLogRow.prototype.getProductquantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setProductquantity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string bacteria = 4;
 * @return {string}
 */
proto.Autoklav.ProcessLogRow.prototype.getBacteria = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setBacteria = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.Autoklav.ProcessLogRow.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string processStart = 6;
 * @return {string}
 */
proto.Autoklav.ProcessLogRow.prototype.getProcessstart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setProcessstart = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string processLength = 7;
 * @return {string}
 */
proto.Autoklav.ProcessLogRow.prototype.getProcesslength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Autoklav.ProcessLogRow} returns this
 */
proto.Autoklav.ProcessLogRow.prototype.setProcesslength = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Autoklav.StartProcessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Autoklav.StartProcessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Autoklav.StartProcessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.StartProcessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    processconfig: (f = msg.getProcessconfig()) && proto.Autoklav.ProcessConfig.toObject(includeInstance, f),
    processinfo: (f = msg.getProcessinfo()) && proto.Autoklav.ProcessInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Autoklav.StartProcessRequest}
 */
proto.Autoklav.StartProcessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Autoklav.StartProcessRequest;
  return proto.Autoklav.StartProcessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Autoklav.StartProcessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Autoklav.StartProcessRequest}
 */
proto.Autoklav.StartProcessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Autoklav.ProcessConfig;
      reader.readMessage(value,proto.Autoklav.ProcessConfig.deserializeBinaryFromReader);
      msg.setProcessconfig(value);
      break;
    case 2:
      var value = new proto.Autoklav.ProcessInfo;
      reader.readMessage(value,proto.Autoklav.ProcessInfo.deserializeBinaryFromReader);
      msg.setProcessinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Autoklav.StartProcessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Autoklav.StartProcessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Autoklav.StartProcessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Autoklav.StartProcessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Autoklav.ProcessConfig.serializeBinaryToWriter
    );
  }
  f = message.getProcessinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Autoklav.ProcessInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcessConfig processConfig = 1;
 * @return {?proto.Autoklav.ProcessConfig}
 */
proto.Autoklav.StartProcessRequest.prototype.getProcessconfig = function() {
  return /** @type{?proto.Autoklav.ProcessConfig} */ (
    jspb.Message.getWrapperField(this, proto.Autoklav.ProcessConfig, 1));
};


/**
 * @param {?proto.Autoklav.ProcessConfig|undefined} value
 * @return {!proto.Autoklav.StartProcessRequest} returns this
*/
proto.Autoklav.StartProcessRequest.prototype.setProcessconfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Autoklav.StartProcessRequest} returns this
 */
proto.Autoklav.StartProcessRequest.prototype.clearProcessconfig = function() {
  return this.setProcessconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Autoklav.StartProcessRequest.prototype.hasProcessconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProcessInfo processInfo = 2;
 * @return {?proto.Autoklav.ProcessInfo}
 */
proto.Autoklav.StartProcessRequest.prototype.getProcessinfo = function() {
  return /** @type{?proto.Autoklav.ProcessInfo} */ (
    jspb.Message.getWrapperField(this, proto.Autoklav.ProcessInfo, 2));
};


/**
 * @param {?proto.Autoklav.ProcessInfo|undefined} value
 * @return {!proto.Autoklav.StartProcessRequest} returns this
*/
proto.Autoklav.StartProcessRequest.prototype.setProcessinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Autoklav.StartProcessRequest} returns this
 */
proto.Autoklav.StartProcessRequest.prototype.clearProcessinfo = function() {
  return this.setProcessinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Autoklav.StartProcessRequest.prototype.hasProcessinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.Autoklav.ProcessConfigType = {
  STERILIZATION: 0,
  PASTERIZATION: 1,
  CUSTOM: 2
};

/**
 * @enum {number}
 */
proto.Autoklav.ProcessConfigState = {
  READY: 0,
  STARTING: 1,
  FILLING: 2,
  HEATING: 3,
  COOLING: 4,
  FINISHING: 5,
  FINISHED: 6
};

/**
 * @enum {number}
 */
proto.Autoklav.ProcessConfigMode = {
  TARGETF: 0,
  TIME: 1
};

goog.object.extend(exports, proto.Autoklav);
