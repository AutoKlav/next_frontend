// source: services/grpc/autoklav.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.autoklav.Empty', null, global);
goog.exportSymbol('proto.autoklav.FilteredModeProcessList', null, global);
goog.exportSymbol('proto.autoklav.FilteredProcessList', null, global);
goog.exportSymbol('proto.autoklav.ProcessConfig', null, global);
goog.exportSymbol('proto.autoklav.ProcessConfigMode', null, global);
goog.exportSymbol('proto.autoklav.ProcessConfigState', null, global);
goog.exportSymbol('proto.autoklav.ProcessConfigType', null, global);
goog.exportSymbol('proto.autoklav.ProcessFilterRequest', null, global);
goog.exportSymbol('proto.autoklav.ProcessInfo', null, global);
goog.exportSymbol('proto.autoklav.ProcessInfoList', null, global);
goog.exportSymbol('proto.autoklav.ProcessLogList', null, global);
goog.exportSymbol('proto.autoklav.ProcessLogRequest', null, global);
goog.exportSymbol('proto.autoklav.ProcessModeFilterRequest', null, global);
goog.exportSymbol('proto.autoklav.ProcessType', null, global);
goog.exportSymbol('proto.autoklav.ProcessTypeRequest', null, global);
goog.exportSymbol('proto.autoklav.ProcessTypesList', null, global);
goog.exportSymbol('proto.autoklav.SensorRelayValues', null, global);
goog.exportSymbol('proto.autoklav.SensorValues', null, global);
goog.exportSymbol('proto.autoklav.SetVariable', null, global);
goog.exportSymbol('proto.autoklav.StartProcessRequest', null, global);
goog.exportSymbol('proto.autoklav.StateMachineValues', null, global);
goog.exportSymbol('proto.autoklav.Status', null, global);
goog.exportSymbol('proto.autoklav.TypeRequest', null, global);
goog.exportSymbol('proto.autoklav.UpdateSensorRequest', null, global);
goog.exportSymbol('proto.autoklav.Variables', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.Empty.displayName = 'proto.autoklav.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.TypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.TypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.TypeRequest.displayName = 'proto.autoklav.TypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.Status.displayName = 'proto.autoklav.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.ProcessTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessTypeRequest.displayName = 'proto.autoklav.ProcessTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.ProcessType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessType.displayName = 'proto.autoklav.ProcessType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessTypesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autoklav.ProcessTypesList.repeatedFields_, null);
};
goog.inherits(proto.autoklav.ProcessTypesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessTypesList.displayName = 'proto.autoklav.ProcessTypesList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.Variables = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.Variables, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.Variables.displayName = 'proto.autoklav.Variables';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.SetVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.SetVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.SetVariable.displayName = 'proto.autoklav.SetVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessFilterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.ProcessFilterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessFilterRequest.displayName = 'proto.autoklav.ProcessFilterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessModeFilterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.ProcessModeFilterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessModeFilterRequest.displayName = 'proto.autoklav.ProcessModeFilterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.UpdateSensorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.UpdateSensorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.UpdateSensorRequest.displayName = 'proto.autoklav.UpdateSensorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.SensorValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.SensorValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.SensorValues.displayName = 'proto.autoklav.SensorValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.SensorRelayValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.SensorRelayValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.SensorRelayValues.displayName = 'proto.autoklav.SensorRelayValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.StateMachineValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.StateMachineValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.StateMachineValues.displayName = 'proto.autoklav.StateMachineValues';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.ProcessConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessConfig.displayName = 'proto.autoklav.ProcessConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.ProcessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessInfo.displayName = 'proto.autoklav.ProcessInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.StartProcessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autoklav.StartProcessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.StartProcessRequest.displayName = 'proto.autoklav.StartProcessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autoklav.ProcessLogRequest.repeatedFields_, null);
};
goog.inherits(proto.autoklav.ProcessLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessLogRequest.displayName = 'proto.autoklav.ProcessLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.FilteredProcessList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autoklav.FilteredProcessList.repeatedFields_, null);
};
goog.inherits(proto.autoklav.FilteredProcessList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.FilteredProcessList.displayName = 'proto.autoklav.FilteredProcessList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.FilteredModeProcessList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autoklav.FilteredModeProcessList.repeatedFields_, null);
};
goog.inherits(proto.autoklav.FilteredModeProcessList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.FilteredModeProcessList.displayName = 'proto.autoklav.FilteredModeProcessList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autoklav.ProcessInfoList.repeatedFields_, null);
};
goog.inherits(proto.autoklav.ProcessInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessInfoList.displayName = 'proto.autoklav.ProcessInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autoklav.ProcessLogList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autoklav.ProcessLogList.repeatedFields_, null);
};
goog.inherits(proto.autoklav.ProcessLogList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autoklav.ProcessLogList.displayName = 'proto.autoklav.ProcessLogList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.Empty}
 */
proto.autoklav.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.Empty;
  return proto.autoklav.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.Empty}
 */
proto.autoklav.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.TypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.TypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.TypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.TypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.TypeRequest}
 */
proto.autoklav.TypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.TypeRequest;
  return proto.autoklav.TypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.TypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.TypeRequest}
 */
proto.autoklav.TypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.TypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.TypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.TypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.TypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.autoklav.TypeRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.TypeRequest} returns this
 */
proto.autoklav.TypeRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errors: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorsstring: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.Status}
 */
proto.autoklav.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.Status;
  return proto.autoklav.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.Status}
 */
proto.autoklav.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrors(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorsstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrors();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorsstring();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.autoklav.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.Status} returns this
 */
proto.autoklav.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 errors = 2;
 * @return {number}
 */
proto.autoklav.Status.prototype.getErrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.Status} returns this
 */
proto.autoklav.Status.prototype.setErrors = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string errorsString = 3;
 * @return {string}
 */
proto.autoklav.Status.prototype.getErrorsstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.Status} returns this
 */
proto.autoklav.Status.prototype.setErrorsstring = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    customtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    finishtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maintainpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    maintaintemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessTypeRequest}
 */
proto.autoklav.ProcessTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessTypeRequest;
  return proto.autoklav.ProcessTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessTypeRequest}
 */
proto.autoklav.ProcessTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCustomtemp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFinishtemp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintainpressure(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintaintemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCustomtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getFinishtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMaintainpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMaintaintemp();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autoklav.ProcessTypeRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessTypeRequest} returns this
 */
proto.autoklav.ProcessTypeRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.autoklav.ProcessTypeRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessTypeRequest} returns this
 */
proto.autoklav.ProcessTypeRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double customTemp = 3;
 * @return {number}
 */
proto.autoklav.ProcessTypeRequest.prototype.getCustomtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessTypeRequest} returns this
 */
proto.autoklav.ProcessTypeRequest.prototype.setCustomtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double finishTemp = 4;
 * @return {number}
 */
proto.autoklav.ProcessTypeRequest.prototype.getFinishtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessTypeRequest} returns this
 */
proto.autoklav.ProcessTypeRequest.prototype.setFinishtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double maintainPressure = 5;
 * @return {number}
 */
proto.autoklav.ProcessTypeRequest.prototype.getMaintainpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessTypeRequest} returns this
 */
proto.autoklav.ProcessTypeRequest.prototype.setMaintainpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double maintainTemp = 6;
 * @return {number}
 */
proto.autoklav.ProcessTypeRequest.prototype.getMaintaintemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessTypeRequest} returns this
 */
proto.autoklav.ProcessTypeRequest.prototype.setMaintaintemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessType.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    customtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    finishtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    maintainpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    maintaintemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessType}
 */
proto.autoklav.ProcessType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessType;
  return proto.autoklav.ProcessType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessType}
 */
proto.autoklav.ProcessType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCustomtemp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFinishtemp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintainpressure(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintaintemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCustomtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getFinishtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMaintainpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMaintaintemp();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.autoklav.ProcessType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.autoklav.ProcessType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.autoklav.ProcessType.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double customTemp = 4;
 * @return {number}
 */
proto.autoklav.ProcessType.prototype.getCustomtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setCustomtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double finishTemp = 5;
 * @return {number}
 */
proto.autoklav.ProcessType.prototype.getFinishtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setFinishtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double maintainPressure = 6;
 * @return {number}
 */
proto.autoklav.ProcessType.prototype.getMaintainpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setMaintainpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double maintainTemp = 7;
 * @return {number}
 */
proto.autoklav.ProcessType.prototype.getMaintaintemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessType} returns this
 */
proto.autoklav.ProcessType.prototype.setMaintaintemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autoklav.ProcessTypesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessTypesList.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessTypesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessTypesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessTypesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    processtypesList: jspb.Message.toObjectList(msg.getProcesstypesList(),
    proto.autoklav.ProcessType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessTypesList}
 */
proto.autoklav.ProcessTypesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessTypesList;
  return proto.autoklav.ProcessTypesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessTypesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessTypesList}
 */
proto.autoklav.ProcessTypesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autoklav.ProcessType;
      reader.readMessage(value,proto.autoklav.ProcessType.deserializeBinaryFromReader);
      msg.addProcesstypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessTypesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessTypesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessTypesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessTypesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcesstypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.autoklav.ProcessType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessType processTypes = 1;
 * @return {!Array<!proto.autoklav.ProcessType>}
 */
proto.autoklav.ProcessTypesList.prototype.getProcesstypesList = function() {
  return /** @type{!Array<!proto.autoklav.ProcessType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autoklav.ProcessType, 1));
};


/**
 * @param {!Array<!proto.autoklav.ProcessType>} value
 * @return {!proto.autoklav.ProcessTypesList} returns this
*/
proto.autoklav.ProcessTypesList.prototype.setProcesstypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autoklav.ProcessType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autoklav.ProcessType}
 */
proto.autoklav.ProcessTypesList.prototype.addProcesstypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autoklav.ProcessType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.ProcessTypesList} returns this
 */
proto.autoklav.ProcessTypesList.prototype.clearProcesstypesList = function() {
  return this.setProcesstypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.Variables.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.Variables.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.Variables} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.Variables.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialdatatime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statemachinetick: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sterilizationtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    pasterizationtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.Variables}
 */
proto.autoklav.Variables.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.Variables;
  return proto.autoklav.Variables.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.Variables} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.Variables}
 */
proto.autoklav.Variables.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSerialdatatime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatemachinetick(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSterilizationtemp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPasterizationtemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.Variables.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.Variables.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.Variables} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.Variables.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialdatatime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatemachinetick();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSterilizationtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getPasterizationtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 serialDataTime = 1;
 * @return {number}
 */
proto.autoklav.Variables.prototype.getSerialdatatime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.Variables} returns this
 */
proto.autoklav.Variables.prototype.setSerialdatatime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 stateMachineTick = 2;
 * @return {number}
 */
proto.autoklav.Variables.prototype.getStatemachinetick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.Variables} returns this
 */
proto.autoklav.Variables.prototype.setStatemachinetick = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double sterilizationTemp = 3;
 * @return {number}
 */
proto.autoklav.Variables.prototype.getSterilizationtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.Variables} returns this
 */
proto.autoklav.Variables.prototype.setSterilizationtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double pasterizationTemp = 4;
 * @return {number}
 */
proto.autoklav.Variables.prototype.getPasterizationtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.Variables} returns this
 */
proto.autoklav.Variables.prototype.setPasterizationtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.SetVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.SetVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.SetVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.SetVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.SetVariable}
 */
proto.autoklav.SetVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.SetVariable;
  return proto.autoklav.SetVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.SetVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.SetVariable}
 */
proto.autoklav.SetVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.SetVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.SetVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.SetVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.SetVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autoklav.SetVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.SetVariable} returns this
 */
proto.autoklav.SetVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.autoklav.SetVariable.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.SetVariable} returns this
 */
proto.autoklav.SetVariable.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessFilterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessFilterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessFilterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessFilterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessFilterRequest}
 */
proto.autoklav.ProcessFilterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessFilterRequest;
  return proto.autoklav.ProcessFilterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessFilterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessFilterRequest}
 */
proto.autoklav.ProcessFilterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessFilterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessFilterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessFilterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessFilterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string columnName = 1;
 * @return {string}
 */
proto.autoklav.ProcessFilterRequest.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessFilterRequest} returns this
 */
proto.autoklav.ProcessFilterRequest.prototype.setColumnname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessModeFilterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessModeFilterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessModeFilterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessModeFilterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    productquantity: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessModeFilterRequest}
 */
proto.autoklav.ProcessModeFilterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessModeFilterRequest;
  return proto.autoklav.ProcessModeFilterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessModeFilterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessModeFilterRequest}
 */
proto.autoklav.ProcessModeFilterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductquantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessModeFilterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessModeFilterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessModeFilterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessModeFilterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProductquantity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string productName = 1;
 * @return {string}
 */
proto.autoklav.ProcessModeFilterRequest.prototype.getProductname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessModeFilterRequest} returns this
 */
proto.autoklav.ProcessModeFilterRequest.prototype.setProductname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string productQuantity = 2;
 * @return {string}
 */
proto.autoklav.ProcessModeFilterRequest.prototype.getProductquantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessModeFilterRequest} returns this
 */
proto.autoklav.ProcessModeFilterRequest.prototype.setProductquantity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.UpdateSensorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.UpdateSensorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.UpdateSensorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.UpdateSensorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    minvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    maxvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.UpdateSensorRequest}
 */
proto.autoklav.UpdateSensorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.UpdateSensorRequest;
  return proto.autoklav.UpdateSensorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.UpdateSensorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.UpdateSensorRequest}
 */
proto.autoklav.UpdateSensorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.UpdateSensorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.UpdateSensorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.UpdateSensorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.UpdateSensorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMaxvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autoklav.UpdateSensorRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.UpdateSensorRequest} returns this
 */
proto.autoklav.UpdateSensorRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double minValue = 2;
 * @return {number}
 */
proto.autoklav.UpdateSensorRequest.prototype.getMinvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.UpdateSensorRequest} returns this
 */
proto.autoklav.UpdateSensorRequest.prototype.setMinvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double maxValue = 3;
 * @return {number}
 */
proto.autoklav.UpdateSensorRequest.prototype.getMaxvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.UpdateSensorRequest} returns this
 */
proto.autoklav.UpdateSensorRequest.prototype.setMaxvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.SensorValues.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.SensorValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.SensorValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.SensorValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    temp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    tempk: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.SensorValues}
 */
proto.autoklav.SensorValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.SensorValues;
  return proto.autoklav.SensorValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.SensorValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.SensorValues}
 */
proto.autoklav.SensorValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTempk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.SensorValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.SensorValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.SensorValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.SensorValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemp();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTempk();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double temp = 1;
 * @return {number}
 */
proto.autoklav.SensorValues.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorValues} returns this
 */
proto.autoklav.SensorValues.prototype.setTemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double tempK = 2;
 * @return {number}
 */
proto.autoklav.SensorValues.prototype.getTempk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorValues} returns this
 */
proto.autoklav.SensorValues.prototype.setTempk = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double pressure = 3;
 * @return {number}
 */
proto.autoklav.SensorValues.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorValues} returns this
 */
proto.autoklav.SensorValues.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.SensorRelayValues.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.SensorRelayValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.SensorRelayValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.SensorRelayValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    waterfill: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heating: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bypass: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pump: jspb.Message.getFieldWithDefault(msg, 4, 0),
    inpressure: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cooling: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.SensorRelayValues}
 */
proto.autoklav.SensorRelayValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.SensorRelayValues;
  return proto.autoklav.SensorRelayValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.SensorRelayValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.SensorRelayValues}
 */
proto.autoklav.SensorRelayValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWaterfill(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeating(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBypass(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPump(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInpressure(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCooling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.SensorRelayValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.SensorRelayValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.SensorRelayValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.SensorRelayValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaterfill();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeating();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBypass();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPump();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getInpressure();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCooling();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 waterFill = 1;
 * @return {number}
 */
proto.autoklav.SensorRelayValues.prototype.getWaterfill = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorRelayValues} returns this
 */
proto.autoklav.SensorRelayValues.prototype.setWaterfill = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 heating = 2;
 * @return {number}
 */
proto.autoklav.SensorRelayValues.prototype.getHeating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorRelayValues} returns this
 */
proto.autoklav.SensorRelayValues.prototype.setHeating = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 bypass = 3;
 * @return {number}
 */
proto.autoklav.SensorRelayValues.prototype.getBypass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorRelayValues} returns this
 */
proto.autoklav.SensorRelayValues.prototype.setBypass = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 pump = 4;
 * @return {number}
 */
proto.autoklav.SensorRelayValues.prototype.getPump = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorRelayValues} returns this
 */
proto.autoklav.SensorRelayValues.prototype.setPump = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 inPressure = 5;
 * @return {number}
 */
proto.autoklav.SensorRelayValues.prototype.getInpressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorRelayValues} returns this
 */
proto.autoklav.SensorRelayValues.prototype.setInpressure = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 cooling = 6;
 * @return {number}
 */
proto.autoklav.SensorRelayValues.prototype.getCooling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.SensorRelayValues} returns this
 */
proto.autoklav.SensorRelayValues.prototype.setCooling = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.StateMachineValues.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.StateMachineValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.StateMachineValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.StateMachineValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    elapsedtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    temp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    tempk: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    dtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    dr: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    fr: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    r: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    sumfr: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    sumr: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.StateMachineValues}
 */
proto.autoklav.StateMachineValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.StateMachineValues;
  return proto.autoklav.StateMachineValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.StateMachineValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.StateMachineValues}
 */
proto.autoklav.StateMachineValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setElapsedtime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTempk(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDtemp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPressure(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDr(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFr(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setR(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSumfr(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSumr(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.StateMachineValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.StateMachineValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.StateMachineValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.StateMachineValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getElapsedtime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getTemp();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getTempk();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getDtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getDr();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getFr();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getSumfr();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getSumr();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double elapsedTime = 2;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getElapsedtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setElapsedtime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double temp = 3;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setTemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double tempK = 4;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getTempk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setTempk = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double dTemp = 5;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getDtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setDtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double pressure = 6;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint32 state = 7;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double Dr = 8;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getDr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setDr = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double Fr = 9;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getFr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setFr = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double r = 10;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setR = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double sumFr = 11;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getSumfr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setSumfr = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double sumR = 12;
 * @return {number}
 */
proto.autoklav.StateMachineValues.prototype.getSumr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setSumr = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional string timestamp = 13;
 * @return {string}
 */
proto.autoklav.StateMachineValues.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.StateMachineValues} returns this
 */
proto.autoklav.StateMachineValues.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    customtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targettime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maintaintemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    maintainpressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    finishtemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessConfig}
 */
proto.autoklav.ProcessConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessConfig;
  return proto.autoklav.ProcessConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessConfig}
 */
proto.autoklav.ProcessConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.autoklav.ProcessConfigType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCustomtemp(value);
      break;
    case 3:
      var value = /** @type {!proto.autoklav.ProcessConfigMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTargettime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintaintemp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaintainpressure(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFinishtemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCustomtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTargettime();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMaintaintemp();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMaintainpressure();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getFinishtemp();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional ProcessConfigType type = 1;
 * @return {!proto.autoklav.ProcessConfigType}
 */
proto.autoklav.ProcessConfig.prototype.getType = function() {
  return /** @type {!proto.autoklav.ProcessConfigType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.autoklav.ProcessConfigType} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double customTemp = 2;
 * @return {number}
 */
proto.autoklav.ProcessConfig.prototype.getCustomtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setCustomtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional ProcessConfigMode mode = 3;
 * @return {!proto.autoklav.ProcessConfigMode}
 */
proto.autoklav.ProcessConfig.prototype.getMode = function() {
  return /** @type {!proto.autoklav.ProcessConfigMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.autoklav.ProcessConfigMode} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 targetTime = 4;
 * @return {number}
 */
proto.autoklav.ProcessConfig.prototype.getTargettime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setTargettime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double maintainTemp = 5;
 * @return {number}
 */
proto.autoklav.ProcessConfig.prototype.getMaintaintemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setMaintaintemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double maintainPressure = 6;
 * @return {number}
 */
proto.autoklav.ProcessConfig.prototype.getMaintainpressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setMaintainpressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double finishTemp = 7;
 * @return {number}
 */
proto.autoklav.ProcessConfig.prototype.getFinishtemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessConfig} returns this
 */
proto.autoklav.ProcessConfig.prototype.setFinishtemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    productquantity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bacteria: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    processstart: jspb.Message.getFieldWithDefault(msg, 6, ""),
    targetf: jspb.Message.getFieldWithDefault(msg, 7, ""),
    processlength: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessInfo}
 */
proto.autoklav.ProcessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessInfo;
  return proto.autoklav.ProcessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessInfo}
 */
proto.autoklav.ProcessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductquantity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBacteria(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessstart(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetf(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcesslength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getProductname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductquantity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBacteria();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProcessstart();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTargetf();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProcesslength();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.autoklav.ProcessInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string productName = 2;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getProductname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setProductname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string productQuantity = 3;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getProductquantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setProductquantity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string bacteria = 4;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getBacteria = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setBacteria = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string processStart = 6;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getProcessstart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setProcessstart = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string targetF = 7;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getTargetf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setTargetf = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string processLength = 8;
 * @return {string}
 */
proto.autoklav.ProcessInfo.prototype.getProcesslength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.autoklav.ProcessInfo} returns this
 */
proto.autoklav.ProcessInfo.prototype.setProcesslength = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.StartProcessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.StartProcessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.StartProcessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.StartProcessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    processconfig: (f = msg.getProcessconfig()) && proto.autoklav.ProcessConfig.toObject(includeInstance, f),
    processinfo: (f = msg.getProcessinfo()) && proto.autoklav.ProcessInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.StartProcessRequest}
 */
proto.autoklav.StartProcessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.StartProcessRequest;
  return proto.autoklav.StartProcessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.StartProcessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.StartProcessRequest}
 */
proto.autoklav.StartProcessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autoklav.ProcessConfig;
      reader.readMessage(value,proto.autoklav.ProcessConfig.deserializeBinaryFromReader);
      msg.setProcessconfig(value);
      break;
    case 2:
      var value = new proto.autoklav.ProcessInfo;
      reader.readMessage(value,proto.autoklav.ProcessInfo.deserializeBinaryFromReader);
      msg.setProcessinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.StartProcessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.StartProcessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.StartProcessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.StartProcessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.autoklav.ProcessConfig.serializeBinaryToWriter
    );
  }
  f = message.getProcessinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autoklav.ProcessInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcessConfig processConfig = 1;
 * @return {?proto.autoklav.ProcessConfig}
 */
proto.autoklav.StartProcessRequest.prototype.getProcessconfig = function() {
  return /** @type{?proto.autoklav.ProcessConfig} */ (
    jspb.Message.getWrapperField(this, proto.autoklav.ProcessConfig, 1));
};


/**
 * @param {?proto.autoklav.ProcessConfig|undefined} value
 * @return {!proto.autoklav.StartProcessRequest} returns this
*/
proto.autoklav.StartProcessRequest.prototype.setProcessconfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autoklav.StartProcessRequest} returns this
 */
proto.autoklav.StartProcessRequest.prototype.clearProcessconfig = function() {
  return this.setProcessconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autoklav.StartProcessRequest.prototype.hasProcessconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProcessInfo processInfo = 2;
 * @return {?proto.autoklav.ProcessInfo}
 */
proto.autoklav.StartProcessRequest.prototype.getProcessinfo = function() {
  return /** @type{?proto.autoklav.ProcessInfo} */ (
    jspb.Message.getWrapperField(this, proto.autoklav.ProcessInfo, 2));
};


/**
 * @param {?proto.autoklav.ProcessInfo|undefined} value
 * @return {!proto.autoklav.StartProcessRequest} returns this
*/
proto.autoklav.StartProcessRequest.prototype.setProcessinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autoklav.StartProcessRequest} returns this
 */
proto.autoklav.StartProcessRequest.prototype.clearProcessinfo = function() {
  return this.setProcessinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autoklav.StartProcessRequest.prototype.hasProcessinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autoklav.ProcessLogRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessLogRequest}
 */
proto.autoklav.ProcessLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessLogRequest;
  return proto.autoklav.ProcessLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessLogRequest}
 */
proto.autoklav.ProcessLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 ids = 1;
 * @return {!Array<number>}
 */
proto.autoklav.ProcessLogRequest.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.autoklav.ProcessLogRequest} returns this
 */
proto.autoklav.ProcessLogRequest.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.autoklav.ProcessLogRequest} returns this
 */
proto.autoklav.ProcessLogRequest.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.ProcessLogRequest} returns this
 */
proto.autoklav.ProcessLogRequest.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autoklav.FilteredProcessList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.FilteredProcessList.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.FilteredProcessList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.FilteredProcessList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.FilteredProcessList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.FilteredProcessList}
 */
proto.autoklav.FilteredProcessList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.FilteredProcessList;
  return proto.autoklav.FilteredProcessList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.FilteredProcessList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.FilteredProcessList}
 */
proto.autoklav.FilteredProcessList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.FilteredProcessList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.FilteredProcessList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.FilteredProcessList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.FilteredProcessList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.autoklav.FilteredProcessList.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autoklav.FilteredProcessList} returns this
 */
proto.autoklav.FilteredProcessList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autoklav.FilteredProcessList} returns this
 */
proto.autoklav.FilteredProcessList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.FilteredProcessList} returns this
 */
proto.autoklav.FilteredProcessList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autoklav.FilteredModeProcessList.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.FilteredModeProcessList.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.FilteredModeProcessList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.FilteredModeProcessList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.FilteredModeProcessList.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetfvaluesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    processlengthvaluesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.FilteredModeProcessList}
 */
proto.autoklav.FilteredModeProcessList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.FilteredModeProcessList;
  return proto.autoklav.FilteredModeProcessList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.FilteredModeProcessList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.FilteredModeProcessList}
 */
proto.autoklav.FilteredModeProcessList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTargetfvalues(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addProcesslengthvalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.FilteredModeProcessList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.FilteredModeProcessList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.FilteredModeProcessList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.FilteredModeProcessList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetfvaluesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getProcesslengthvaluesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string targetFValues = 1;
 * @return {!Array<string>}
 */
proto.autoklav.FilteredModeProcessList.prototype.getTargetfvaluesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autoklav.FilteredModeProcessList} returns this
 */
proto.autoklav.FilteredModeProcessList.prototype.setTargetfvaluesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autoklav.FilteredModeProcessList} returns this
 */
proto.autoklav.FilteredModeProcessList.prototype.addTargetfvalues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.FilteredModeProcessList} returns this
 */
proto.autoklav.FilteredModeProcessList.prototype.clearTargetfvaluesList = function() {
  return this.setTargetfvaluesList([]);
};


/**
 * repeated string processLengthValues = 2;
 * @return {!Array<string>}
 */
proto.autoklav.FilteredModeProcessList.prototype.getProcesslengthvaluesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autoklav.FilteredModeProcessList} returns this
 */
proto.autoklav.FilteredModeProcessList.prototype.setProcesslengthvaluesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autoklav.FilteredModeProcessList} returns this
 */
proto.autoklav.FilteredModeProcessList.prototype.addProcesslengthvalues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.FilteredModeProcessList} returns this
 */
proto.autoklav.FilteredModeProcessList.prototype.clearProcesslengthvaluesList = function() {
  return this.setProcesslengthvaluesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autoklav.ProcessInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    processesList: jspb.Message.toObjectList(msg.getProcessesList(),
    proto.autoklav.ProcessInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessInfoList}
 */
proto.autoklav.ProcessInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessInfoList;
  return proto.autoklav.ProcessInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessInfoList}
 */
proto.autoklav.ProcessInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autoklav.ProcessInfo;
      reader.readMessage(value,proto.autoklav.ProcessInfo.deserializeBinaryFromReader);
      msg.addProcesses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.autoklav.ProcessInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessInfo processes = 1;
 * @return {!Array<!proto.autoklav.ProcessInfo>}
 */
proto.autoklav.ProcessInfoList.prototype.getProcessesList = function() {
  return /** @type{!Array<!proto.autoklav.ProcessInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autoklav.ProcessInfo, 1));
};


/**
 * @param {!Array<!proto.autoklav.ProcessInfo>} value
 * @return {!proto.autoklav.ProcessInfoList} returns this
*/
proto.autoklav.ProcessInfoList.prototype.setProcessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autoklav.ProcessInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autoklav.ProcessInfo}
 */
proto.autoklav.ProcessInfoList.prototype.addProcesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autoklav.ProcessInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.ProcessInfoList} returns this
 */
proto.autoklav.ProcessInfoList.prototype.clearProcessesList = function() {
  return this.setProcessesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autoklav.ProcessLogList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autoklav.ProcessLogList.prototype.toObject = function(opt_includeInstance) {
  return proto.autoklav.ProcessLogList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autoklav.ProcessLogList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessLogList.toObject = function(includeInstance, msg) {
  var f, obj = {
    processlogsList: jspb.Message.toObjectList(msg.getProcesslogsList(),
    proto.autoklav.StateMachineValues.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autoklav.ProcessLogList}
 */
proto.autoklav.ProcessLogList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autoklav.ProcessLogList;
  return proto.autoklav.ProcessLogList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autoklav.ProcessLogList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autoklav.ProcessLogList}
 */
proto.autoklav.ProcessLogList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autoklav.StateMachineValues;
      reader.readMessage(value,proto.autoklav.StateMachineValues.deserializeBinaryFromReader);
      msg.addProcesslogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autoklav.ProcessLogList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autoklav.ProcessLogList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autoklav.ProcessLogList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autoklav.ProcessLogList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcesslogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.autoklav.StateMachineValues.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StateMachineValues processLogs = 1;
 * @return {!Array<!proto.autoklav.StateMachineValues>}
 */
proto.autoklav.ProcessLogList.prototype.getProcesslogsList = function() {
  return /** @type{!Array<!proto.autoklav.StateMachineValues>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autoklav.StateMachineValues, 1));
};


/**
 * @param {!Array<!proto.autoklav.StateMachineValues>} value
 * @return {!proto.autoklav.ProcessLogList} returns this
*/
proto.autoklav.ProcessLogList.prototype.setProcesslogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autoklav.StateMachineValues=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autoklav.StateMachineValues}
 */
proto.autoklav.ProcessLogList.prototype.addProcesslogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autoklav.StateMachineValues, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autoklav.ProcessLogList} returns this
 */
proto.autoklav.ProcessLogList.prototype.clearProcesslogsList = function() {
  return this.setProcesslogsList([]);
};


/**
 * @enum {number}
 */
proto.autoklav.ProcessConfigType = {
  STERILIZATION: 0,
  PASTERIZATION: 1,
  CUSTOM: 2
};

/**
 * @enum {number}
 */
proto.autoklav.ProcessConfigState = {
  READY: 0,
  STARTING: 1,
  FILLING: 2,
  HEATING: 3,
  COOLING: 4,
  FINISHING: 5,
  FINISHED: 6
};

/**
 * @enum {number}
 */
proto.autoklav.ProcessConfigMode = {
  TARGETF: 0,
  TIME: 1
};

goog.object.extend(exports, proto.autoklav);
